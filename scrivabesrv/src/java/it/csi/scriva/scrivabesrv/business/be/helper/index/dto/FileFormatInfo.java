/*-
 * ========================LICENSE_START=================================
 * 
 * Copyright (C) 2025 Regione Piemonte
 * 
 * SPDX-FileCopyrightText: (C) Copyright 2025 Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.scriva.scrivabesrv.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * Risultato del riconoscimento del formato di un contenuto binario.
 */
@ApiModel(description = "Risultato del riconoscimento del formato di un contenuto binario.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class FileFormatInfo {
    @JsonProperty("puid")
    private String puid = null;

    @JsonProperty("mimeType")
    private String mimeType = null;

    @JsonProperty("description")
    private String description = null;

    @JsonProperty("formatVersion")
    private String formatVersion = null;

    @JsonProperty("typeCode")
    private Integer typeCode = null;

    @JsonProperty("typeDescription")
    private String typeDescription = null;

    @JsonProperty("warning")
    private String warning = null;

    @JsonProperty("identificationDate")
    private String identificationDate = null;

    @JsonProperty("uid")
    private String uid = null;

    @JsonProperty("typeExtension")
    private String typeExtension = null;

    /**
     * Puid file format info.
     *
     * @param puid the puid
     * @return the file format info
     */
    public FileFormatInfo puid(String puid) {
        this.puid = puid;
        return this;
    }

    /**
     * PUID associato al tipo di file riconosciuto.
     *
     * @return puid puid
     */
    @ApiModelProperty(example = "fmt/276", value = "PUID associato al tipo di file riconosciuto.")
    public String getPuid() {
        return puid;
    }

    /**
     * Sets puid.
     *
     * @param puid the puid
     */
    public void setPuid(String puid) {
        this.puid = puid;
    }

    /**
     * Mime type file format info.
     *
     * @param mimeType the mime type
     * @return the file format info
     */
    public FileFormatInfo mimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }

    /**
     * MIME type.
     *
     * @return mimeType mime type
     */
    @ApiModelProperty(example = "application/pdf", value = "MIME type.")
    public String getMimeType() {
        return mimeType;
    }

    /**
     * Sets mime type.
     *
     * @param mimeType the mime type
     */
    public void setMimeType(String mimeType) {
        this.mimeType = mimeType;
    }

    /**
     * Description file format info.
     *
     * @param description the description
     * @return the file format info
     */
    public FileFormatInfo description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Esito del processo di identificazione.
     *
     * @return description description
     */
    @ApiModelProperty(example = "Acrobat PDF 1.7 - Portable Document Format", value = "Esito del processo di identificazione.")
    public String getDescription() {
        return description;
    }

    /**
     * Sets description.
     *
     * @param description the description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Format version file format info.
     *
     * @param formatVersion the format version
     * @return the file format info
     */
    public FileFormatInfo formatVersion(String formatVersion) {
        this.formatVersion = formatVersion;
        return this;
    }

    /**
     * Versione del formato riconosciuto.
     *
     * @return formatVersion format version
     */
    @ApiModelProperty(example = "1.7", value = "Versione del formato riconosciuto.")
    public String getFormatVersion() {
        return formatVersion;
    }

    /**
     * Sets format version.
     *
     * @param formatVersion the format version
     */
    public void setFormatVersion(String formatVersion) {
        this.formatVersion = formatVersion;
    }

    /**
     * Type code file format info.
     *
     * @param typeCode the type code
     * @return the file format info
     */
    public FileFormatInfo typeCode(Integer typeCode) {
        this.typeCode = typeCode;
        return this;
    }

    /**
     * Codice di tipo associato al formato.
     *
     * @return typeCode type code
     */
    @ApiModelProperty(example = "10", value = "Codice di tipo associato al formato.")
    public Integer getTypeCode() {
        return typeCode;
    }

    /**
     * Sets type code.
     *
     * @param typeCode the type code
     */
    public void setTypeCode(Integer typeCode) {
        this.typeCode = typeCode;
    }

    /**
     * Type description file format info.
     *
     * @param typeDescription the type description
     * @return the file format info
     */
    public FileFormatInfo typeDescription(String typeDescription) {
        this.typeDescription = typeDescription;
        return this;
    }

    /**
     * Esito del processo di identificazione.
     *
     * @return typeDescription type description
     */
    @ApiModelProperty(example = "posistive-specific", value = "Esito del processo di identificazione.")
    public String getTypeDescription() {
        return typeDescription;
    }

    /**
     * Sets type description.
     *
     * @param typeDescription the type description
     */
    public void setTypeDescription(String typeDescription) {
        this.typeDescription = typeDescription;
    }

    /**
     * Warning file format info.
     *
     * @param warning the warning
     * @return the file format info
     */
    public FileFormatInfo warning(String warning) {
        this.warning = warning;
        return this;
    }

    /**
     * Eventuali informazioni aggiuntive sul riconoscimento.
     *
     * @return warning warning
     */
    @ApiModelProperty(value = "Eventuali informazioni aggiuntive sul riconoscimento.")
    public String getWarning() {
        return warning;
    }

    /**
     * Sets warning.
     *
     * @param warning the warning
     */
    public void setWarning(String warning) {
        this.warning = warning;
    }

    /**
     * Identification date file format info.
     *
     * @param identificationDate the identification date
     * @return the file format info
     */
    public FileFormatInfo identificationDate(String identificationDate) {
        this.identificationDate = identificationDate;
        return this;
    }

    /**
     * Timestamp del riconoscimento.
     *
     * @return identificationDate identification date
     */
    @ApiModelProperty(example = "2020-11-19T14:32:59.163+0000", value = "Timestamp del riconoscimento.")
    public String getIdentificationDate() {
        return identificationDate;
    }

    /**
     * Sets identification date.
     *
     * @param identificationDate the identification date
     */
    public void setIdentificationDate(String identificationDate) {
        this.identificationDate = identificationDate;
    }

    /**
     * Uid file format info.
     *
     * @param uid the uid
     * @return the file format info
     */
    public FileFormatInfo uid(String uid) {
        this.uid = uid;
        return this;
    }

    /**
     * Eventuale UID del nodo associato al riconoscimento.
     *
     * @return uid uid
     */
    @ApiModelProperty(example = "1f2d08fd-2a74-11eb-9691-b7b00e8a99a0", value = "Eventuale UID del nodo associato al riconoscimento.")
    public String getUid() {
        return uid;
    }

    /**
     * Sets uid.
     *
     * @param uid the uid
     */
    public void setUid(String uid) {
        this.uid = uid;
    }

    /**
     * Type extension file format info.
     *
     * @param typeExtension the type extension
     * @return the file format info
     */
    public FileFormatInfo typeExtension(String typeExtension) {
        this.typeExtension = typeExtension;
        return this;
    }

    /**
     * Estensione del formato riconosciuto.
     *
     * @return typeExtension type extension
     */
    @ApiModelProperty(example = "pdf", value = "Estensione del formato riconosciuto.")
    public String getTypeExtension() {
        return typeExtension;
    }

    /**
     * Sets type extension.
     *
     * @param typeExtension the type extension
     */
    public void setTypeExtension(String typeExtension) {
        this.typeExtension = typeExtension;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FileFormatInfo fileFormatInfo = (FileFormatInfo) o;
        return Objects.equals(this.puid, fileFormatInfo.puid) &&
                Objects.equals(this.mimeType, fileFormatInfo.mimeType) &&
                Objects.equals(this.description, fileFormatInfo.description) &&
                Objects.equals(this.formatVersion, fileFormatInfo.formatVersion) &&
                Objects.equals(this.typeCode, fileFormatInfo.typeCode) &&
                Objects.equals(this.typeDescription, fileFormatInfo.typeDescription) &&
                Objects.equals(this.warning, fileFormatInfo.warning) &&
                Objects.equals(this.identificationDate, fileFormatInfo.identificationDate) &&
                Objects.equals(this.uid, fileFormatInfo.uid) &&
                Objects.equals(this.typeExtension, fileFormatInfo.typeExtension);
    }

    @Override
    public int hashCode() {
        return Objects.hash(puid, mimeType, description, formatVersion, typeCode, typeDescription, warning, identificationDate, uid, typeExtension);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FileFormatInfo {\n");

        sb.append("    puid: ").append(toIndentedString(puid)).append("\n");
        sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    formatVersion: ").append(toIndentedString(formatVersion)).append("\n");
        sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
        sb.append("    typeDescription: ").append(toIndentedString(typeDescription)).append("\n");
        sb.append("    warning: ").append(toIndentedString(warning)).append("\n");
        sb.append("    identificationDate: ").append(toIndentedString(identificationDate)).append("\n");
        sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
        sb.append("    typeExtension: ").append(toIndentedString(typeExtension)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}