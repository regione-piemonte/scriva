/*-
 * ========================LICENSE_START=================================
 * 
 * Copyright (C) 2025 Regione Piemonte
 * 
 * SPDX-FileCopyrightText: (C) Copyright 2025 Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.scriva.scrivabesrv.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Definizione di un modello dei dati.
 */
@ApiModel(description = "Definizione di un modello dei dati.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ModelMetadata {
    @JsonProperty("prefixedName")
    private String prefixedName = null;

    @JsonProperty("description")
    private String description = null;

    @JsonProperty("types")
    private List<Object> types = null;

    @JsonProperty("aspects")
    private List<AspectMetadata> aspects = null;

    /**
     * Prefixed name model metadata.
     *
     * @param prefixedName the prefixed name
     * @return the model metadata
     */
    public ModelMetadata prefixedName(String prefixedName) {
        this.prefixedName = prefixedName;
        return this;
    }

    /**
     * Prefixed name del modello.
     *
     * @return prefixedName prefixed name
     */
    @ApiModelProperty(example = "cm:contentmodel", value = "Prefixed name del modello.")
    public String getPrefixedName() {
        return prefixedName;
    }

    /**
     * Sets prefixed name.
     *
     * @param prefixedName the prefixed name
     */
    public void setPrefixedName(String prefixedName) {
        this.prefixedName = prefixedName;
    }

    /**
     * Description model metadata.
     *
     * @param description the description
     * @return the model metadata
     */
    public ModelMetadata description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Descrizione del modello.
     *
     * @return description description
     */
    @ApiModelProperty(example = "Alfresco Content Domain Model", value = "Descrizione del modello.")
    public String getDescription() {
        return description;
    }

    /**
     * Sets description.
     *
     * @param description the description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Types model metadata.
     *
     * @param types the types
     * @return the model metadata
     */
    public ModelMetadata types(List<Object> types) {
        this.types = types;
        return this;
    }

    /**
     * Add types item model metadata.
     *
     * @param typesItem the types item
     * @return the model metadata
     */
    public ModelMetadata addTypesItem(Object typesItem) {
        if (this.types == null) {
            this.types = new ArrayList<Object>();
        }
        this.types.add(typesItem);
        return this;
    }

    /**
     * Definizione dei tipi del modello.
     *
     * @return types types
     */
    @ApiModelProperty(value = "Definizione dei tipi del modello.")
    public List<Object> getTypes() {
        return types;
    }

    /**
     * Sets types.
     *
     * @param types the types
     */
    public void setTypes(List<Object> types) {
        this.types = types;
    }

    /**
     * Aspects model metadata.
     *
     * @param aspects the aspects
     * @return the model metadata
     */
    public ModelMetadata aspects(List<AspectMetadata> aspects) {
        this.aspects = aspects;
        return this;
    }

    /**
     * Add aspects item model metadata.
     *
     * @param aspectsItem the aspects item
     * @return the model metadata
     */
    public ModelMetadata addAspectsItem(AspectMetadata aspectsItem) {
        if (this.aspects == null) {
            this.aspects = new ArrayList<AspectMetadata>();
        }
        this.aspects.add(aspectsItem);
        return this;
    }

    /**
     * Definizione degli aspetti del modello.
     *
     * @return aspects aspects
     */
    @ApiModelProperty(value = "Definizione degli aspetti del modello.")
    public List<AspectMetadata> getAspects() {
        return aspects;
    }

    /**
     * Sets aspects.
     *
     * @param aspects the aspects
     */
    public void setAspects(List<AspectMetadata> aspects) {
        this.aspects = aspects;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModelMetadata modelMetadata = (ModelMetadata) o;
        return Objects.equals(this.prefixedName, modelMetadata.prefixedName) &&
                Objects.equals(this.description, modelMetadata.description) &&
                Objects.equals(this.types, modelMetadata.types) &&
                Objects.equals(this.aspects, modelMetadata.aspects);
    }

    @Override
    public int hashCode() {
        return Objects.hash(prefixedName, description, types, aspects);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ModelMetadata {\n");

        sb.append("    prefixedName: ").append(toIndentedString(prefixedName)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    types: ").append(toIndentedString(types)).append("\n");
        sb.append("    aspects: ").append(toIndentedString(aspects)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}