/*-
 * ========================LICENSE_START=================================
 * 
 * Copyright (C) 2025 Regione Piemonte
 * 
 * SPDX-FileCopyrightText: (C) Copyright 2025 Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.scriva.scrivabesrv.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * Informazioni per il confronto tra nodi.
 */
@ApiModel(description = "Informazioni per il confronto tra nodi.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class NodeInfo {
    @JsonProperty("uid")
    private String uid = null;

    @JsonProperty("contentPropertyName")
    private String contentPropertyName = null;

    @JsonProperty("enveloped")
    private Boolean enveloped = null;

    /**
     * Uid node info.
     *
     * @param uid the uid
     * @return the node info
     */
    public NodeInfo uid(String uid) {
        this.uid = uid;
        return this;
    }

    /**
     * UUID del nodo.
     *
     * @return uid uid
     */
    @ApiModelProperty(value = "UUID del nodo.")
    public String getUid() {
        return uid;
    }

    /**
     * Sets uid.
     *
     * @param uid the uid
     */
    public void setUid(String uid) {
        this.uid = uid;
    }

    /**
     * Content property name node info.
     *
     * @param contentPropertyName the content property name
     * @return the node info
     */
    public NodeInfo contentPropertyName(String contentPropertyName) {
        this.contentPropertyName = contentPropertyName;
        return this;
    }

    /**
     * Il nome della proprietà di tipo cm:content che contiene il contenuto binario.
     *
     * @return contentPropertyName content property name
     */
    @ApiModelProperty(value = "Il nome della proprietà di tipo cm:content che contiene il contenuto binario.")
    public String getContentPropertyName() {
        return contentPropertyName;
    }

    /**
     * Sets content property name.
     *
     * @param contentPropertyName the content property name
     */
    public void setContentPropertyName(String contentPropertyName) {
        this.contentPropertyName = contentPropertyName;
    }

    /**
     * Enveloped node info.
     *
     * @param enveloped the enveloped
     * @return the node info
     */
    public NodeInfo enveloped(Boolean enveloped) {
        this.enveloped = enveloped;
        return this;
    }

    /**
     * Imposta se il nodo è imbustato.
     *
     * @return enveloped boolean
     */
    @ApiModelProperty(value = "Imposta se il nodo è imbustato.")
    public Boolean isEnveloped() {
        return enveloped;
    }

    /**
     * Sets enveloped.
     *
     * @param enveloped the enveloped
     */
    public void setEnveloped(Boolean enveloped) {
        this.enveloped = enveloped;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NodeInfo nodeInfo = (NodeInfo) o;
        return Objects.equals(this.uid, nodeInfo.uid) &&
                Objects.equals(this.contentPropertyName, nodeInfo.contentPropertyName) &&
                Objects.equals(this.enveloped, nodeInfo.enveloped);
    }

    @Override
    public int hashCode() {
        return Objects.hash(uid, contentPropertyName, enveloped);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NodeInfo {\n");

        sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
        sb.append("    contentPropertyName: ").append(toIndentedString(contentPropertyName)).append("\n");
        sb.append("    enveloped: ").append(toIndentedString(enveloped)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}