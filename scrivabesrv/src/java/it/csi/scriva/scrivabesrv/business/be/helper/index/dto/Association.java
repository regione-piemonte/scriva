/*-
 * ========================LICENSE_START=================================
 * 
 * Copyright (C) 2025 Regione Piemonte
 * 
 * SPDX-FileCopyrightText: (C) Copyright 2025 Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.scriva.scrivabesrv.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * Associazione tra due nodi.L&#39;associazione può essere padre/figlio o sorgente/destinazione.
 */
@ApiModel(description = "Associazione tra due nodi.L'associazione può essere padre/figlio o sorgente/destinazione.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Association {
    @JsonProperty("targetUid")
    private String targetUid = null;

    @JsonProperty("prefixedName")
    private String prefixedName = null;

    @JsonProperty("typePrefixedName")
    private String typePrefixedName = null;

    @JsonProperty("childAssociation")
    private Boolean childAssociation = null;

    /**
     * Target uid association.
     *
     * @param targetUid the target uid
     * @return the association
     */
    public Association targetUid(String targetUid) {
        this.targetUid = targetUid;
        return this;
    }

    /**
     * UID del nodo figlio o destinazione.
     *
     * @return targetUid target uid
     */
    @ApiModelProperty(example = "f22e46b5-1ea8-11eb-9204-9f3a5004d33a", value = "UID del nodo figlio o destinazione.")
    public String getTargetUid() {
        return targetUid;
    }

    /**
     * Sets target uid.
     *
     * @param targetUid the target uid
     */
    public void setTargetUid(String targetUid) {
        this.targetUid = targetUid;
    }

    /**
     * Prefixed name association.
     *
     * @param prefixedName the prefixed name
     * @return the association
     */
    public Association prefixedName(String prefixedName) {
        this.prefixedName = prefixedName;
        return this;
    }

    /**
     * Prefixed name del nome dell&#39;associazione.
     *
     * @return prefixedName prefixed name
     */
    @ApiModelProperty(example = "cm:contains", value = "Prefixed name del nome dell'associazione.")
    public String getPrefixedName() {
        return prefixedName;
    }

    /**
     * Sets prefixed name.
     *
     * @param prefixedName the prefixed name
     */
    public void setPrefixedName(String prefixedName) {
        this.prefixedName = prefixedName;
    }

    /**
     * Type prefixed name association.
     *
     * @param typePrefixedName the type prefixed name
     * @return the association
     */
    public Association typePrefixedName(String typePrefixedName) {
        this.typePrefixedName = typePrefixedName;
        return this;
    }

    /**
     * Prefixed name del tipo dell&#39;associazione.
     *
     * @return typePrefixedName type prefixed name
     */
    @ApiModelProperty(example = "cm:contains", value = "Prefixed name del tipo dell'associazione.")
    public String getTypePrefixedName() {
        return typePrefixedName;
    }

    /**
     * Sets type prefixed name.
     *
     * @param typePrefixedName the type prefixed name
     */
    public void setTypePrefixedName(String typePrefixedName) {
        this.typePrefixedName = typePrefixedName;
    }

    /**
     * Child association association.
     *
     * @param childAssociation the child association
     * @return the association
     */
    public Association childAssociation(Boolean childAssociation) {
        this.childAssociation = childAssociation;
        return this;
    }

    /**
     * Indica se l&#39;associazione è di tipo padre/figlio o di tipo sorgente/destinazione.
     *
     * @return childAssociation boolean
     */
    @ApiModelProperty(value = "Indica se l'associazione è di tipo padre/figlio o di tipo sorgente/destinazione.")
    public Boolean isChildAssociation() {
        return childAssociation;
    }

    /**
     * Sets child association.
     *
     * @param childAssociation the child association
     */
    public void setChildAssociation(Boolean childAssociation) {
        this.childAssociation = childAssociation;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Association association = (Association) o;
        return Objects.equals(this.targetUid, association.targetUid) &&
                Objects.equals(this.prefixedName, association.prefixedName) &&
                Objects.equals(this.typePrefixedName, association.typePrefixedName) &&
                Objects.equals(this.childAssociation, association.childAssociation);
    }

    @Override
    public int hashCode() {
        return Objects.hash(targetUid, prefixedName, typePrefixedName, childAssociation);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Association {\n");

        sb.append("    targetUid: ").append(toIndentedString(targetUid)).append("\n");
        sb.append("    prefixedName: ").append(toIndentedString(prefixedName)).append("\n");
        sb.append("    typePrefixedName: ").append(toIndentedString(typePrefixedName)).append("\n");
        sb.append("    childAssociation: ").append(toIndentedString(childAssociation)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}