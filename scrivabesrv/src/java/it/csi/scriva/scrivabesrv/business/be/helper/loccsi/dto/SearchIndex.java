/*-
 * ========================LICENSE_START=================================
 * 
 * Copyright (C) 2025 Regione Piemonte
 * 
 * SPDX-FileCopyrightText: (C) Copyright 2025 Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * ricerca-fulltext-geografica
 * Servizi di ricerca full text con localizzazione geografica
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.scriva.scrivabesrv.business.be.helper.loccsi.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Model representing a search index
 */
@ApiModel(description = "Model representing a search index")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-02-24T08:29:11.008Z")
public class SearchIndex {
  private Long id = null;

  private String name = null;

  private String description = null;

  private List<String> catalogs = null;

  public SearchIndex id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * The search index identifier (in LOCCSI)
   * @return id
  **/
  @ApiModelProperty(value = "The search index identifier (in LOCCSI)")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public SearchIndex name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The search index name
   * @return name
  **/
  @ApiModelProperty(value = "The search index name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SearchIndex description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The search index description
   * @return description
  **/
  @ApiModelProperty(value = "The search index description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public SearchIndex catalogs(List<String> catalogs) {
    this.catalogs = catalogs;
    return this;
  }

  public SearchIndex addCatalogsItem(String catalogsItem) {
    if (this.catalogs == null) {
      this.catalogs = new ArrayList<String>();
    }
    this.catalogs.add(catalogsItem);
    return this;
  }

   /**
   * The list of catalogs the index belong to
   * @return catalogs
  **/
  @ApiModelProperty(value = "The list of catalogs the index belong to")
  public List<String> getCatalogs() {
    return catalogs;
  }

  public void setCatalogs(List<String> catalogs) {
    this.catalogs = catalogs;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchIndex searchIndex = (SearchIndex) o;
    return Objects.equals(this.id, searchIndex.id) &&
        Objects.equals(this.name, searchIndex.name) &&
        Objects.equals(this.description, searchIndex.description) &&
        Objects.equals(this.catalogs, searchIndex.catalogs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, catalogs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchIndex {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    catalogs: ").append(toIndentedString(catalogs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}