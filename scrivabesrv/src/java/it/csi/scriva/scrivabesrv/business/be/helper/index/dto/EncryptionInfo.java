/*-
 * ========================LICENSE_START=================================
 * 
 * Copyright (C) 2025 Regione Piemonte
 * 
 * SPDX-FileCopyrightText: (C) Copyright 2025 Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.scriva.scrivabesrv.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * Informazioni di cifratura del contenuto binario del nodo.
 */
@ApiModel(description = "Informazioni di cifratura del contenuto binario del nodo.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class EncryptionInfo {
    @JsonProperty("key")
    private String key = null;

    @JsonProperty("algorithm")
    private String algorithm = null;

    @JsonProperty("padding")
    private String padding = null;

    @JsonProperty("mode")
    private String mode = null;

    @JsonProperty("keyId")
    private String keyId = null;

    @JsonProperty("sourceIV")
    private String sourceIV = null;

    @JsonProperty("sourceEncrypted")
    private Boolean sourceEncrypted = null;

    /**
     * Key encryption info.
     *
     * @param key the key
     * @return the encryption info
     */
    public EncryptionInfo key(String key) {
        this.key = key;
        return this;
    }

    /**
     * Chiave di cifratura.
     *
     * @return key key
     */
    @ApiModelProperty(example = "0123456789ABCDEF", value = "Chiave di cifratura.")
    public String getKey() {
        return key;
    }

    /**
     * Sets key.
     *
     * @param key the key
     */
    public void setKey(String key) {
        this.key = key;
    }

    /**
     * Algorithm encryption info.
     *
     * @param algorithm the algorithm
     * @return the encryption info
     */
    public EncryptionInfo algorithm(String algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Algoritmo utilizzato per la cifratura.
     *
     * @return algorithm algorithm
     */
    @ApiModelProperty(example = "AES", value = "Algoritmo utilizzato per la cifratura.")
    public String getAlgorithm() {
        return algorithm;
    }

    /**
     * Sets algorithm.
     *
     * @param algorithm the algorithm
     */
    public void setAlgorithm(String algorithm) {
        this.algorithm = algorithm;
    }

    /**
     * Padding encryption info.
     *
     * @param padding the padding
     * @return the encryption info
     */
    public EncryptionInfo padding(String padding) {
        this.padding = padding;
        return this;
    }

    /**
     * Tipo di padding utilizzato per la cifratura.
     *
     * @return padding padding
     */
    @ApiModelProperty(example = "PKCS5Padding", value = "Tipo di padding utilizzato per la cifratura.")
    public String getPadding() {
        return padding;
    }

    /**
     * Sets padding.
     *
     * @param padding the padding
     */
    public void setPadding(String padding) {
        this.padding = padding;
    }

    /**
     * Mode encryption info.
     *
     * @param mode the mode
     * @return the encryption info
     */
    public EncryptionInfo mode(String mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Modalità di cifratura.
     *
     * @return mode mode
     */
    @ApiModelProperty(example = "CBC", value = "Modalità di cifratura.")
    public String getMode() {
        return mode;
    }

    /**
     * Sets mode.
     *
     * @param mode the mode
     */
    public void setMode(String mode) {
        this.mode = mode;
    }

    /**
     * Key id encryption info.
     *
     * @param keyId the key id
     * @return the encryption info
     */
    public EncryptionInfo keyId(String keyId) {
        this.keyId = keyId;
        return this;
    }

    /**
     * Identificativo della chiave crittografica utilizzata.
     *
     * @return keyId key id
     */
    @ApiModelProperty(example = "0123456789ABCDEF", value = "Identificativo della chiave crittografica utilizzata.")
    public String getKeyId() {
        return keyId;
    }

    /**
     * Sets key id.
     *
     * @param keyId the key id
     */
    public void setKeyId(String keyId) {
        this.keyId = keyId;
    }

    /**
     * Source iv encryption info.
     *
     * @param sourceIV the source iv
     * @return the encryption info
     */
    public EncryptionInfo sourceIV(String sourceIV) {
        this.sourceIV = sourceIV;
        return this;
    }

    /**
     * Initialization Vector utilizzato per criptare il contenuto alla fonte.
     *
     * @return sourceIV source iv
     */
    @ApiModelProperty(value = "Initialization Vector utilizzato per criptare il contenuto alla fonte.")
    public String getSourceIV() {
        return sourceIV;
    }

    /**
     * Sets source iv.
     *
     * @param sourceIV the source iv
     */
    public void setSourceIV(String sourceIV) {
        this.sourceIV = sourceIV;
    }

    /**
     * Source encrypted encryption info.
     *
     * @param sourceEncrypted the source encrypted
     * @return the encryption info
     */
    public EncryptionInfo sourceEncrypted(Boolean sourceEncrypted) {
        this.sourceEncrypted = sourceEncrypted;
        return this;
    }

    /**
     * Indica se il contenuto è criptato alla fonte.
     *
     * @return sourceEncrypted boolean
     */
    @ApiModelProperty(value = "Indica se il contenuto è criptato alla fonte.")
    public Boolean isSourceEncrypted() {
        return sourceEncrypted;
    }

    /**
     * Sets source encrypted.
     *
     * @param sourceEncrypted the source encrypted
     */
    public void setSourceEncrypted(Boolean sourceEncrypted) {
        this.sourceEncrypted = sourceEncrypted;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EncryptionInfo encryptionInfo = (EncryptionInfo) o;
        return Objects.equals(this.key, encryptionInfo.key) &&
                Objects.equals(this.algorithm, encryptionInfo.algorithm) &&
                Objects.equals(this.padding, encryptionInfo.padding) &&
                Objects.equals(this.mode, encryptionInfo.mode) &&
                Objects.equals(this.keyId, encryptionInfo.keyId) &&
                Objects.equals(this.sourceIV, encryptionInfo.sourceIV) &&
                Objects.equals(this.sourceEncrypted, encryptionInfo.sourceEncrypted);
    }

    @Override
    public int hashCode() {
        return Objects.hash(key, algorithm, padding, mode, keyId, sourceIV, sourceEncrypted);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EncryptionInfo {\n");

        sb.append("    key: ").append(toIndentedString(key)).append("\n");
        sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
        sb.append("    padding: ").append(toIndentedString(padding)).append("\n");
        sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
        sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
        sb.append("    sourceIV: ").append(toIndentedString(sourceIV)).append("\n");
        sb.append("    sourceEncrypted: ").append(toIndentedString(sourceEncrypted)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}