/*-
 * ========================LICENSE_START=================================
 * 
 * Copyright (C) 2025 Regione Piemonte
 * 
 * SPDX-FileCopyrightText: (C) Copyright 2025 Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.scriva.scrivabesrv.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * Rappresenta il MIME type di un file associato all&#39;estensione del suo nome.
 */
@ApiModel(description = "Rappresenta il MIME type di un file associato all'estensione del suo nome.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Mimetype {
    @JsonProperty("fileExtension")
    private String fileExtension = null;

    @JsonProperty("mimetype")
    private String mimetype = null;

    /**
     * File extension mimetype.
     *
     * @param fileExtension the file extension
     * @return the mimetype
     */
    public Mimetype fileExtension(String fileExtension) {
        this.fileExtension = fileExtension;
        return this;
    }

    /**
     * Estensione del nome del file.
     *
     * @return fileExtension file extension
     */
    @ApiModelProperty(example = "pdf", value = "Estensione del nome del file.")
    public String getFileExtension() {
        return fileExtension;
    }

    /**
     * Sets file extension.
     *
     * @param fileExtension the file extension
     */
    public void setFileExtension(String fileExtension) {
        this.fileExtension = fileExtension;
    }

    /**
     * Mimetype mimetype.
     *
     * @param mimetype the mimetype
     * @return the mimetype
     */
    public Mimetype mimetype(String mimetype) {
        this.mimetype = mimetype;
        return this;
    }

    /**
     * MIME type del file.
     *
     * @return mimetype mimetype
     */
    @ApiModelProperty(example = "application/pdf", value = "MIME type del file.")
    public String getMimetype() {
        return mimetype;
    }

    /**
     * Sets mimetype.
     *
     * @param mimetype the mimetype
     */
    public void setMimetype(String mimetype) {
        this.mimetype = mimetype;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Mimetype mimetype = (Mimetype) o;
        return Objects.equals(this.fileExtension, mimetype.fileExtension) &&
                Objects.equals(this.mimetype, mimetype.mimetype);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fileExtension, mimetype);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Mimetype {\n");

        sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
        sb.append("    mimetype: ").append(toIndentedString(mimetype)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}