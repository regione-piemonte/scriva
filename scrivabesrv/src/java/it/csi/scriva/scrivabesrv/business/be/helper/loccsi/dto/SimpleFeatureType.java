/*-
 * ========================LICENSE_START=================================
 * 
 * Copyright (C) 2025 Regione Piemonte
 * 
 * SPDX-FileCopyrightText: (C) Copyright 2025 Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * ricerca-fulltext-geografica
 * Servizi di ricerca full text con localizzazione geografica
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.scriva.scrivabesrv.business.be.helper.loccsi.dto;

import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * SimpleFeatureType
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-02-24T08:29:11.008Z")
public class SimpleFeatureType {
  private List<AttributeDescriptor> attributeDescriptors = null;

  private List<AttributeType> types = null;

  private Integer attributeCount = null;

  private String typeName = null;

  private CoordinateReferenceSystem coordinateReferenceSystem = null;

  private Boolean identified = null;

  private GeometryDescriptor geometryDescriptor = null;

  private Boolean inline = null;

  private List<PropertyDescriptor> descriptors = null;

  private AttributeType _super = null;

  private List<Filter> restrictions = null;

  private Map<String, Object> userData = null;

  private InternationalString description = null;

  private Name name = null;

  private Boolean _abstract = null;

  public SimpleFeatureType attributeDescriptors(List<AttributeDescriptor> attributeDescriptors) {
    this.attributeDescriptors = attributeDescriptors;
    return this;
  }

  public SimpleFeatureType addAttributeDescriptorsItem(AttributeDescriptor attributeDescriptorsItem) {
    if (this.attributeDescriptors == null) {
      this.attributeDescriptors = new ArrayList<AttributeDescriptor>();
    }
    this.attributeDescriptors.add(attributeDescriptorsItem);
    return this;
  }

   /**
   * Get attributeDescriptors
   * @return attributeDescriptors
  **/
  @ApiModelProperty(value = "")
  public List<AttributeDescriptor> getAttributeDescriptors() {
    return attributeDescriptors;
  }

  public void setAttributeDescriptors(List<AttributeDescriptor> attributeDescriptors) {
    this.attributeDescriptors = attributeDescriptors;
  }

  public SimpleFeatureType types(List<AttributeType> types) {
    this.types = types;
    return this;
  }

  public SimpleFeatureType addTypesItem(AttributeType typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<AttributeType>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * Get types
   * @return types
  **/
  @ApiModelProperty(value = "")
  public List<AttributeType> getTypes() {
    return types;
  }

  public void setTypes(List<AttributeType> types) {
    this.types = types;
  }

  public SimpleFeatureType attributeCount(Integer attributeCount) {
    this.attributeCount = attributeCount;
    return this;
  }

   /**
   * Get attributeCount
   * @return attributeCount
  **/
  @ApiModelProperty(value = "")
  public Integer getAttributeCount() {
    return attributeCount;
  }

  public void setAttributeCount(Integer attributeCount) {
    this.attributeCount = attributeCount;
  }

  public SimpleFeatureType typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

   /**
   * Get typeName
   * @return typeName
  **/
  @ApiModelProperty(value = "")
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }

  public SimpleFeatureType coordinateReferenceSystem(CoordinateReferenceSystem coordinateReferenceSystem) {
    this.coordinateReferenceSystem = coordinateReferenceSystem;
    return this;
  }

   /**
   * Get coordinateReferenceSystem
   * @return coordinateReferenceSystem
  **/
  @ApiModelProperty(value = "")
  public CoordinateReferenceSystem getCoordinateReferenceSystem() {
    return coordinateReferenceSystem;
  }

  public void setCoordinateReferenceSystem(CoordinateReferenceSystem coordinateReferenceSystem) {
    this.coordinateReferenceSystem = coordinateReferenceSystem;
  }

  public SimpleFeatureType identified(Boolean identified) {
    this.identified = identified;
    return this;
  }

   /**
   * Get identified
   * @return identified
  **/
  @ApiModelProperty(value = "")
  public Boolean isIdentified() {
    return identified;
  }

  public void setIdentified(Boolean identified) {
    this.identified = identified;
  }

  public SimpleFeatureType geometryDescriptor(GeometryDescriptor geometryDescriptor) {
    this.geometryDescriptor = geometryDescriptor;
    return this;
  }

   /**
   * Get geometryDescriptor
   * @return geometryDescriptor
  **/
  @ApiModelProperty(value = "")
  public GeometryDescriptor getGeometryDescriptor() {
    return geometryDescriptor;
  }

  public void setGeometryDescriptor(GeometryDescriptor geometryDescriptor) {
    this.geometryDescriptor = geometryDescriptor;
  }

  public SimpleFeatureType inline(Boolean inline) {
    this.inline = inline;
    return this;
  }

   /**
   * Get inline
   * @return inline
  **/
  @ApiModelProperty(value = "")
  public Boolean isInline() {
    return inline;
  }

  public void setInline(Boolean inline) {
    this.inline = inline;
  }

  public SimpleFeatureType descriptors(List<PropertyDescriptor> descriptors) {
    this.descriptors = descriptors;
    return this;
  }

  public SimpleFeatureType addDescriptorsItem(PropertyDescriptor descriptorsItem) {
    if (this.descriptors == null) {
      this.descriptors = new ArrayList<PropertyDescriptor>();
    }
    this.descriptors.add(descriptorsItem);
    return this;
  }

   /**
   * Get descriptors
   * @return descriptors
  **/
  @ApiModelProperty(value = "")
  public List<PropertyDescriptor> getDescriptors() {
    return descriptors;
  }

  public void setDescriptors(List<PropertyDescriptor> descriptors) {
    this.descriptors = descriptors;
  }

  public SimpleFeatureType _super(AttributeType _super) {
    this._super = _super;
    return this;
  }

   /**
   * Get _super
   * @return _super
  **/
  @ApiModelProperty(value = "")
  public AttributeType getSuper() {
    return _super;
  }

  public void setSuper(AttributeType _super) {
    this._super = _super;
  }

  public SimpleFeatureType restrictions(List<Filter> restrictions) {
    this.restrictions = restrictions;
    return this;
  }

  public SimpleFeatureType addRestrictionsItem(Filter restrictionsItem) {
    if (this.restrictions == null) {
      this.restrictions = new ArrayList<Filter>();
    }
    this.restrictions.add(restrictionsItem);
    return this;
  }

   /**
   * Get restrictions
   * @return restrictions
  **/
  @ApiModelProperty(value = "")
  public List<Filter> getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(List<Filter> restrictions) {
    this.restrictions = restrictions;
  }

  public SimpleFeatureType userData(Map<String, Object> userData) {
    this.userData = userData;
    return this;
  }

  public SimpleFeatureType putUserDataItem(String key, Object userDataItem) {
    if (this.userData == null) {
      this.userData = new HashMap<String, Object>();
    }
    this.userData.put(key, userDataItem);
    return this;
  }

   /**
   * Get userData
   * @return userData
  **/
  @ApiModelProperty(value = "")
  public Map<String, Object> getUserData() {
    return userData;
  }

  public void setUserData(Map<String, Object> userData) {
    this.userData = userData;
  }

  public SimpleFeatureType description(InternationalString description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public InternationalString getDescription() {
    return description;
  }

  public void setDescription(InternationalString description) {
    this.description = description;
  }

  public SimpleFeatureType name(Name name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public Name getName() {
    return name;
  }

  public void setName(Name name) {
    this.name = name;
  }

  public SimpleFeatureType _abstract(Boolean _abstract) {
    this._abstract = _abstract;
    return this;
  }

   /**
   * Get _abstract
   * @return _abstract
  **/
  @ApiModelProperty(value = "")
  public Boolean isAbstract() {
    return _abstract;
  }

  public void setAbstract(Boolean _abstract) {
    this._abstract = _abstract;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleFeatureType simpleFeatureType = (SimpleFeatureType) o;
    return Objects.equals(this.attributeDescriptors, simpleFeatureType.attributeDescriptors) &&
        Objects.equals(this.types, simpleFeatureType.types) &&
        Objects.equals(this.attributeCount, simpleFeatureType.attributeCount) &&
        Objects.equals(this.typeName, simpleFeatureType.typeName) &&
        Objects.equals(this.coordinateReferenceSystem, simpleFeatureType.coordinateReferenceSystem) &&
        Objects.equals(this.identified, simpleFeatureType.identified) &&
        Objects.equals(this.geometryDescriptor, simpleFeatureType.geometryDescriptor) &&
        Objects.equals(this.inline, simpleFeatureType.inline) &&
        Objects.equals(this.descriptors, simpleFeatureType.descriptors) &&
        Objects.equals(this._super, simpleFeatureType._super) &&
        Objects.equals(this.restrictions, simpleFeatureType.restrictions) &&
        Objects.equals(this.userData, simpleFeatureType.userData) &&
        Objects.equals(this.description, simpleFeatureType.description) &&
        Objects.equals(this.name, simpleFeatureType.name) &&
        Objects.equals(this._abstract, simpleFeatureType._abstract);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeDescriptors, types, attributeCount, typeName, coordinateReferenceSystem, identified, geometryDescriptor, inline, descriptors, _super, restrictions, userData, description, name, _abstract);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleFeatureType {\n");

    sb.append("    attributeDescriptors: ").append(toIndentedString(attributeDescriptors)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    attributeCount: ").append(toIndentedString(attributeCount)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    coordinateReferenceSystem: ").append(toIndentedString(coordinateReferenceSystem)).append("\n");
    sb.append("    identified: ").append(toIndentedString(identified)).append("\n");
    sb.append("    geometryDescriptor: ").append(toIndentedString(geometryDescriptor)).append("\n");
    sb.append("    inline: ").append(toIndentedString(inline)).append("\n");
    sb.append("    descriptors: ").append(toIndentedString(descriptors)).append("\n");
    sb.append("    _super: ").append(toIndentedString(_super)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _abstract: ").append(toIndentedString(_abstract)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}