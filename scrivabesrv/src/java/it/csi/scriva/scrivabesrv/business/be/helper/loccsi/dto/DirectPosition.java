/*-
 * ========================LICENSE_START=================================
 * 
 * Copyright (C) 2025 Regione Piemonte
 * 
 * SPDX-FileCopyrightText: (C) Copyright 2025 Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * ricerca-fulltext-geografica
 * Servizi di ricerca full text con localizzazione geografica
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.scriva.scrivabesrv.business.be.helper.loccsi.dto;

import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * DirectPosition
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-02-24T08:29:11.008Z")
public class DirectPosition {
  private CoordinateReferenceSystem coordinateReferenceSystem = null;

  private List<Double> coordinate = null;

  private Integer dimension = null;

  private DirectPosition directPosition = null;

  public DirectPosition coordinateReferenceSystem(CoordinateReferenceSystem coordinateReferenceSystem) {
    this.coordinateReferenceSystem = coordinateReferenceSystem;
    return this;
  }

   /**
   * Get coordinateReferenceSystem
   * @return coordinateReferenceSystem
  **/
  @ApiModelProperty(value = "")
  public CoordinateReferenceSystem getCoordinateReferenceSystem() {
    return coordinateReferenceSystem;
  }

  public void setCoordinateReferenceSystem(CoordinateReferenceSystem coordinateReferenceSystem) {
    this.coordinateReferenceSystem = coordinateReferenceSystem;
  }

  public DirectPosition coordinate(List<Double> coordinate) {
    this.coordinate = coordinate;
    return this;
  }

  public DirectPosition addCoordinateItem(Double coordinateItem) {
    if (this.coordinate == null) {
      this.coordinate = new ArrayList<Double>();
    }
    this.coordinate.add(coordinateItem);
    return this;
  }

   /**
   * Get coordinate
   * @return coordinate
  **/
  @ApiModelProperty(value = "")
  public List<Double> getCoordinate() {
    return coordinate;
  }

  public void setCoordinate(List<Double> coordinate) {
    this.coordinate = coordinate;
  }

  public DirectPosition dimension(Integer dimension) {
    this.dimension = dimension;
    return this;
  }

   /**
   * Get dimension
   * @return dimension
  **/
  @ApiModelProperty(value = "")
  public Integer getDimension() {
    return dimension;
  }

  public void setDimension(Integer dimension) {
    this.dimension = dimension;
  }

  public DirectPosition directPosition(DirectPosition directPosition) {
    this.directPosition = directPosition;
    return this;
  }

   /**
   * Get directPosition
   * @return directPosition
  **/
  @ApiModelProperty(value = "")
  public DirectPosition getDirectPosition() {
    return directPosition;
  }

  public void setDirectPosition(DirectPosition directPosition) {
    this.directPosition = directPosition;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectPosition directPosition = (DirectPosition) o;
    return Objects.equals(this.coordinateReferenceSystem, directPosition.coordinateReferenceSystem) &&
        Objects.equals(this.coordinate, directPosition.coordinate) &&
        Objects.equals(this.dimension, directPosition.dimension) &&
        Objects.equals(this.directPosition, directPosition.directPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coordinateReferenceSystem, coordinate, dimension, directPosition);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectPosition {\n");

    sb.append("    coordinateReferenceSystem: ").append(toIndentedString(coordinateReferenceSystem)).append("\n");
    sb.append("    coordinate: ").append(toIndentedString(coordinate)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    directPosition: ").append(toIndentedString(directPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}