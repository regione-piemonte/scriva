/*-
 * ========================LICENSE_START=================================
 * 
 * Copyright (C) 2025 Regione Piemonte
 * 
 * SPDX-FileCopyrightText: (C) Copyright 2025 Regione Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.csi.scriva.scrivabesrv.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Rappresenta una proprietà.
 */
@ApiModel(description = "Rappresenta una proprietà.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Property {
    @JsonProperty("prefixedName")
    private String prefixedName = null;

    @JsonProperty("multivalue")
    private Boolean multivalue = null;

    @JsonProperty("dataType")
    private String dataType = null;

    @JsonProperty("values")
    private List<String> values = null;

    @JsonProperty("relativeAspectPrefixedName")
    private String relativeAspectPrefixedName = null;

    /**
     * Prefixed name property.
     *
     * @param prefixedName the prefixed name
     * @return the property
     */
    public Property prefixedName(String prefixedName) {
        this.prefixedName = prefixedName;
        return this;
    }

    /**
     * Prefixed name dell&#39;eventuale aspetto che contiene la proprietà.
     *
     * @return prefixedName prefixed name
     */
    @ApiModelProperty(example = "cm:name", value = "Prefixed name dell'eventuale aspetto che contiene la proprietà.")
    public String getPrefixedName() {
        return prefixedName;
    }

    /**
     * Sets prefixed name.
     *
     * @param prefixedName the prefixed name
     */
    public void setPrefixedName(String prefixedName) {
        this.prefixedName = prefixedName;
    }

    /**
     * Multivalue property.
     *
     * @param multivalue the multivalue
     * @return the property
     */
    public Property multivalue(Boolean multivalue) {
        this.multivalue = multivalue;
        return this;
    }

    /**
     * Indica se la proprietà è multivalore oppure no.
     *
     * @return multivalue boolean
     */
    @ApiModelProperty(value = "Indica se la proprietà è multivalore oppure no.")
    public Boolean isMultivalue() {
        return multivalue;
    }

    /**
     * Sets multivalue.
     *
     * @param multivalue the multivalue
     */
    public void setMultivalue(Boolean multivalue) {
        this.multivalue = multivalue;
    }

    /**
     * Data type property.
     *
     * @param dataType the data type
     * @return the property
     */
    public Property dataType(String dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * Tipo della proprietà.
     *
     * @return dataType data type
     */
    @ApiModelProperty(example = "d:text", value = "Tipo della proprietà.")
    public String getDataType() {
        return dataType;
    }

    /**
     * Sets data type.
     *
     * @param dataType the data type
     */
    public void setDataType(String dataType) {
        this.dataType = dataType;
    }

    /**
     * Values property.
     *
     * @param values the values
     * @return the property
     */
    public Property values(List<String> values) {
        this.values = values;
        return this;
    }

    /**
     * Add values item property.
     *
     * @param valuesItem the values item
     * @return the property
     */
    public Property addValuesItem(String valuesItem) {
        if (this.values == null) {
            this.values = new ArrayList<String>();
        }
        this.values.add(valuesItem);
        return this;
    }

    /**
     * Valori della proprietà.
     *
     * @return values values
     */
    @ApiModelProperty(value = "Valori della proprietà.")
    public List<String> getValues() {
        return values;
    }

    /**
     * Sets values.
     *
     * @param values the values
     */
    public void setValues(List<String> values) {
        this.values = values;
    }

    /**
     * Relative aspect prefixed name property.
     *
     * @param relativeAspectPrefixedName the relative aspect prefixed name
     * @return the property
     */
    public Property relativeAspectPrefixedName(String relativeAspectPrefixedName) {
        this.relativeAspectPrefixedName = relativeAspectPrefixedName;
        return this;
    }

    /**
     * Prefixed name dell&#39;eventuale aspetto che contiene la proprietà.
     *
     * @return relativeAspectPrefixedName relative aspect prefixed name
     */
    @ApiModelProperty(value = "Prefixed name dell'eventuale aspetto che contiene la proprietà.")
    public String getRelativeAspectPrefixedName() {
        return relativeAspectPrefixedName;
    }

    /**
     * Sets relative aspect prefixed name.
     *
     * @param relativeAspectPrefixedName the relative aspect prefixed name
     */
    public void setRelativeAspectPrefixedName(String relativeAspectPrefixedName) {
        this.relativeAspectPrefixedName = relativeAspectPrefixedName;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Property property = (Property) o;
        return Objects.equals(this.prefixedName, property.prefixedName) &&
                Objects.equals(this.multivalue, property.multivalue) &&
                Objects.equals(this.dataType, property.dataType) &&
                Objects.equals(this.values, property.values) &&
                Objects.equals(this.relativeAspectPrefixedName, property.relativeAspectPrefixedName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(prefixedName, multivalue, dataType, values, relativeAspectPrefixedName);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Property {\n");

        sb.append("    prefixedName: ").append(toIndentedString(prefixedName)).append("\n");
        sb.append("    multivalue: ").append(toIndentedString(multivalue)).append("\n");
        sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
        sb.append("    values: ").append(toIndentedString(values)).append("\n");
        sb.append("    relativeAspectPrefixedName: ").append(toIndentedString(relativeAspectPrefixedName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}